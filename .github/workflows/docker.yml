name: Build and Deploy to Docker Hub

on:
  - push
  - pull_request

jobs:
  test:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        ports: ["5432:5432"]
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        elixir: [1.12.1]
        otp: [24.0.2]

    env:
      DATABASE_URL_TEST: postgresql://postgres:postgres@localhost/test?sslmode=disable
      MIX_ENV: test
      BUILD_WITHOUT_QUIC: true

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup elixir
        uses: erlef/setup-elixir@v1.9
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2.1.6
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Build
        run: |
          mix compile
      - name: Install assets
        run: |
          npm install --prefix assets
      - name: Build assets
        run: |
          npm run deploy --prefix assets
      - name: Check Formatting
        run: mix format --check-formatted
      - name: Check Prettier
        run: mix prettier
      - name: Run Credo
        run: mix credo --strict
      - name: Run Tests
        run: mix test

  dialyzer:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: [1.12.1]
        otp: [24.0.2]

    env:
      BUILD_WITHOUT_QUIC: true

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup elixir
        uses: erlef/setup-elixir@v1.9
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}
      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v2.1.6
        id: mix-cache # id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
      - name: Retrieve PLT Cache
        uses: actions/cache@v2.1.6
        id: plt-cache
        with:
          path: priv/plts
          key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}-3
      - name: Build
        run: |
          mix compile
      - name: Create PLTs
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p priv/plts
          mix dialyzer --plt
      - name: Run dialyzer
        run: mix dialyzer --no-check

  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'brianmay' }}
    needs:
      - test
      - dialyzer

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v3.5.0
        if: ${{env.DOCKERHUB_USERNAME != 0}}
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/scrooge
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Docker meta
        id: meta
        uses: brianmay/docker-meta@main
        if: ${{env.DOCKERHUB_USERNAME != 0}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        if: ${{env.DOCKERHUB_USERNAME != 0}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        if: ${{env.DOCKERHUB_USERNAME != 0}}
      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        if: ${{env.DOCKERHUB_USERNAME != 0}}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.7.0
        if: ${{env.DOCKERHUB_USERNAME != 0}}
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/scrooge:master
          cache-to: type=inline
          build-args: ${{ steps.meta.outputs.build-args }}
